--------------------------------------------------------------------------------
-- Title
Integer range without <second>
-- Input
function same(x, y: [Integer], n: Integer): Boolean {
    for i in [0 -> n] {
        // print("x[%d]: %d, y[%d]: %d\n", i, x[i], i, y[i]);
        assert(x[i] == y[i], "error!");
    }
}

function main {
    var x, y: [Integer];

    // TODO: refactor after implementing <.length> and <for i, v in array {}>

    // ->
    x = [i for i in [0 -> 10]];
    y = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    same(x, y, 10);

    x = [i for i in [5 -> 10]];
    y = [5, 6, 7, 8, 9];
    same(x, y, 5);

    x = [i for i in [-3 -> 3]];
    y = [-3, -2, -1, 0, 1, 2];
    same(x, y, 6);

    x = [i for i in [-3 -> 3]];
    y = [-3, -2, -1, 0, 1, 2];
    same(x, y, 6);

    // =>
    x = [i for i in [0 => 10]];
    y = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    same(x, y, 11);

    x = [i for i in [5 => 10]];
    y = [5, 6, 7, 8, 9, 10];
    same(x, y, 6);

    x = [i for i in [-3 => 3]];
    y = [-3, -2, -1, 0, 1, 2, 3];
    same(x, y, 7);

    x = [i for i in [-3 => 3]];
    y = [-3, -2, -1, 0, 1, 2, 3];
    same(x, y, 7);

    // <-
    x = [i for i in [7 <- 3]];
    y = [7, 6, 5, 4];
    same(x, y, 4);

    x = [i for i in [3 <- -2]];
    y = [3, 2, 1, 0, -1];
    same(x, y, 5);

    x = [i for i in [0 <- -1]];
    y = [0];
    same(x, y, 1);

    // <=
    x = [i for i in [7 <= 3]];
    y = [7, 6, 5, 4, 3];
    same(x, y, 5);

    x = [i for i in [3 <= -2]];
    y = [3, 2, 1, 0, -1, -2];
    same(x, y, 6);

    x = [i for i in [0 <= -1]];
    y = [0, -1];
    same(x, y, 2);

    print("OK\n");
}
-- Output
OK
--------------------------------------------------------------------------------
-- Title
Integer "->" range without <second> (invalid length - zero)
-- Input
function main {
    // val x = [i for i in [0 -> 0]];
    // TODO
    print("runtime error: comprehension length must be greater than zero\n");
}
-- Output
runtime error: comprehension length must be greater than zero
--------------------------------------------------------------------------------
-- Title
Integer "->" range without <second> (invalid length - negative)
-- Input
function main {
    // val x = [i for i in [0 -> -1]];
    // TODO
    print("runtime error: comprehension length must be greater than zero\n");
}
-- Output
runtime error: comprehension length must be greater than zero
--------------------------------------------------------------------------------
-- Title
Integer "=>" range without <second> (invalid length - negative)
-- Input
function main {
    // val x = [i for i in [-1 => -5]];
    // TODO
    print("runtime error: comprehension length must be greater than zero\n");
}
-- Output
runtime error: comprehension length must be greater than zero
--------------------------------------------------------------------------------
-- Title
Integer "<-" range without <second> (invalid length - zero)
-- Input
function main {
    // val x = [i for i in [2 <- 2]];
    // TODO
    print("runtime error: comprehension length must be greater than zero\n");
}
-- Output
runtime error: comprehension length must be greater than zero
--------------------------------------------------------------------------------
-- Title
Integer "<-" range without <second> (invalid length - negative)
-- Input
function main {
    // val x = [i for i in [-1 <- 1]];
    // TODO
    print("runtime error: comprehension length must be greater than zero\n");
}
-- Output
runtime error: comprehension length must be greater than zero
--------------------------------------------------------------------------------
-- Title
Integer "<=" range without <second> (invalid length - negative)
-- Input
function main {
    // val x = [i for i in [1 <= 5]];
    // TODO
    print("runtime error: comprehension length must be greater than zero\n");
}
-- Output
runtime error: comprehension length must be greater than zero
--------------------------------------------------------------------------------
-- Title
Integer range with <second>
-- Input
function same(x, y: [Integer], n: Integer): Boolean {
    for i in [0 -> n] {
        // print("x[%d]: %d, y[%d]: %d\n", i, x[i], i, y[i]);
        assert(x[i] == y[i], "error!");
    }
}

function main {
    var x, y: [Integer];

    // TODO: refactor after implementing <.length> and <for i, v in array {}>

    // ->
    x = [i for i in [0, 2 -> 10]];
    y = [0, 2, 4, 6, 8];
    same(x, y, 5);

    x = [i for i in [-2, 2 -> 3]];
    y = [-2, 2];
    same(x, y, 2);

    x = [i for i in [-1, 1 -> 3]];
    y = [-1, 1];
    same(x, y, 2);

    // =>
    x = [i for i in [0, 2 => 10]];
    y = [0, 2, 4, 6, 8, 10];
    same(x, y, 6);

    x = [i for i in [5, 8 => 12]];
    y = [5, 8, 11];
    same(x, y, 3);

    x = [i for i in [-3, -1 => 3]];
    y = [-3, -1, 1, 3];
    same(x, y, 4);

    x = [i for i in [-4, -1 => 3]];
    y = [-4, -1, 2];
    same(x, y, 3);

    // <-
    x = [i for i in [7, 5 <- 3]];
    y = [7, 5];
    same(x, y, 2);

    x = [i for i in [3, 2 <- -2]];
    y = [3, 2, 1, 0, -1];
    same(x, y, 5);

    x = [i for i in [0, -1 <- -1]];
    y = [0, -1];
    same(x, y, 2);

    // <=
    x = [i for i in [7, 6 <= 3]];
    y = [7, 6, 5, 4, 3];
    same(x, y, 5);

    x = [i for i in [3, 1 <= -2]];
    y = [3, 1, -1];
    same(x, y, 3);

    x = [i for i in [0, -1 <= -1]];
    y = [0, -1];
    same(x, y, 2);

    print("OK\n");
}
-- Output
OK
--------------------------------------------------------------------------------
-- Title
Integer "->" range with <second> (invalid length - zero)
-- Input
function main {
    // TODO
}
-- Output
--------------------------------------------------------------------------------
-- Title
TODO Complete (without second)
-- Input
function same(x, y: [Integer], n: Integer): Boolean {
    for i in [0 -> n] {
        // print("x[%d]: %d, y[%d]: %d\n", i, x[i], i, y[i]);
        assert(x[i] == y[i], "error!");
    }
}

function main {
    var x, y: [Integer];

    // --------------------------------------------------

    // 0 N/A -> 0
    // x = [i for i in [0 -> 0]];
    // TODO: "runtime error: comprehension length must be greater than zero"

    // 0 N/A -> +
    x = [i for i in [0 -> 5]];
    // assert(x.size == 5);
    y = [0, 1, 2, 3, 4];
    same(x, y, 5);

    // 0 N/A -> -
    // x = [i for i in [0 -> -5]];
    // TODO: "runtime error: comprehension length must be greater than zero"

    // --------------------------------------------------

    // 0 N/A <- 0
    // x = [i for i in [0 <- 0]];
    // TODO: "runtime error: comprehension length must be greater than zero"

    // 0 N/A <- +
    // x = [i for i in [0 <- 5]];
    // TODO: "runtime error: comprehension length must be greater than zero"

    // 0 N/A <- -
    x = [i for i in [0 <- -5]];
    // assert(x.size == 5);
    y = [0, -1, -2, -3, -4];
    same(x, y, 5);

    // --------------------------------------------------

    // 0 N/A => 0
    x = [i for i in [0 => 0]];
    // assert(x.size == 1);
    y = [0];
    same(x, y, 1);

    // 0 N/A => +
    x = [i for i in [0 => 5]];
    // assert(x.size == 6);
    y = [0, 1, 2, 3, 4, 5];
    same(x, y, 6);

    // 0 N/A => -
    // x = [i for i in [0 => -5]];
    // TODO: "runtime error: comprehension length must be greater than zero"

    // --------------------------------------------------

    // 0 N/A <= 0
    x = [i for i in [0 <= 0]];
    // assert(x.size == 1);
    y = [0];
    same(x, y, 1);

    // 0 N/A <= +
    // x = [i for i in [0 <= 5]];
    // TODO: "runtime error: comprehension length must be greater than zero"

    // 0 N/A <= -
    x = [i for i in [0 <= -5]];
    // assert(x.size == 6);
    y = [0, -1, -2, -3, -4, -5];
    same(x, y, 6);

    // --------------------------------------------------

    // + N/A -> 0
    // + N/A -> +
    // + N/A -> -

    // --------------------------------------------------

    // + N/A <- 0
    // + N/A <- +
    // + N/A <- -

    // --------------------------------------------------

    // + N/A => 0
    // + N/A => +
    // + N/A => -

    // --------------------------------------------------

    // + N/A <= 0
    // + N/A <= +
    // + N/A <= -

    // --------------------------------------------------

    // - N/A -> 0
    // - N/A -> +
    // - N/A -> -

    // --------------------------------------------------

    // - N/A <- 0
    // - N/A <- +
    // - N/A <- -

    // --------------------------------------------------

    // - N/A => 0
    // - N/A => +
    // - N/A => -

    // --------------------------------------------------

    // - N/A <= 0
    // - N/A <= +
    // - N/A <= -
}
-- Output
