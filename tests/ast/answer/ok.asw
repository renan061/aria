value a: Integer = (1)
function foo(value a: Byte): Integer {
}
function foo(value a: Byte, value b: Byte, value c: Byte): Integer {
}
function foo(value a: Byte, value b: Byte, value c: Byte): Integer {
}
function foo: Integer {
}
function foo(value a: Byte): Void {
}
function foo(value a: Byte, value b: Byte, value c: Byte): Void {
}
function foo(value a: Byte, value b: Byte, value c: Byte): Void {
}
function foo: Void {
}
monitor Monitor {
	variable a: Integer
	variable x: Integer
	variable y: Integer
	variable i: Integer
	variable j: Integer
	variable k: Integer
	variable l: Integer
	variable m: Integer
	variable n: Integer
	variable o: Integer
	variable a: Integer = (1)
	variable a: ? = (1)
	value a: Integer = (1)
	value a: ? = (1)
	function foo: Void {
	}
	private function foo: Void {
	}
	initializer {
	}
}
monitor Monitor {
}
function foo: Void {
	variable type: Integer
	variable type: [Integer]
	variable type: [[[Integer]]]
	variable type: Immutable [Integer]
	variable a: Integer
	variable x: Integer
	variable y: Integer
	variable i: Integer
	variable j: Integer
	variable k: Integer
	variable l: Integer
	variable m: Integer
	variable n: Integer
	variable o: Integer
	variable a: Integer = (1)
	variable a: ? = (1)
	value a: Integer = (1)
	value a: ? = (1)
	a = (1)
	a = ((a) + (1))
	a = ((a) - (1))
	a = ((a) * (1))
	a = ((a) / (1))
	value a: ? = (1)
	foo()
	foo((a))
	foo((a), (b), (c))
	(m).foo()
	(m).foo((a))
	(m).foo((a), (b), (c))
	Monitor()
	Monitor((a))
	Monitor((a), (b), (c))
	wait for (true) in (a)
	signal (a)
	broadcast (a)
	return (true)
	return
	if (true) {
	}
	if (true) {
	} else {
	}
	while (true) {
	}
	spawn function {
	}()
	{
	}
	var = (a)
	var = (((a)[(1)]))
	var = (((((((a)[(1)]))[(1)]))[(1)]))
	var = (((((((foo())[(1)]))[(1)]))[(1)]))
	a = (true)
	a = (false)
	a = (0)
	a = (1)
	a = (1000)
	a = (0.000000)
	a = (1.123000)
	a = (1000.123000)
	a = ("c")
	a = ("string")
	a = ("s p a c e d s t r i n g")
	a = ([(1)])
	a = ([(true), (false)])
	a = ([(foo()), (bar()), (baz())])
	a = (a)
	a = (foo())
	a = (not(true))
	a = (-(1))
	a = ((true) or (false))
	a = ((true) and (false))
	a = ((1) == (1))
	a = ((1) != (1))
	a = ((1) <= (1))
	a = ((1) >= (1))
	a = ((1) < (1))
	a = ((1) > (1))
	a = ((1) + (1))
	a = ((1) - (1))
	a = ((1) * (1))
	a = ((1) / (1))
}
