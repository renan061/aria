// ==================================================
//
//	Global variable definition
//
// ==================================================

value a: Integer = 2;

value a = 2;

// ==================================================
//
//	Function definition
//
// ==================================================

// Function without return value
function foo {}

// Function with return value
function foo: Integer {
	return 1;
}

// ==================================================
//
//	Parameters
//
// ==================================================

// No parameters
function foo {}

// Single parameter
function foo(a: Type) {}

// Many parameters
function foo(x: Byte, y: Integer, z: String) {}

// ==================================================
//
//	Variable declaration
//
// ==================================================

function foo {
	// Single variable
	variable a: Integer;

	// Two variables
	variable x, y: Integer;

	// Many variables
	variable i, j, k, l, m, n, o: Integer;
}

// ==================================================
//
//	Variable definition
//
// ==================================================

function foo {
	variable a: Integer = 1;
	variable a = 1;
	value a: Integer = 1;
	value a = 1;
}

// ==================================================
//
//	Type
//
// ==================================================

// Array type
function foo(a, b: [Array]) {
	// Upper ID type
	variable c: Type;

	// Nested arrays
	variable d: [[[Integer]]];

	// With Immutable
	variable c: Immutable [Integer];
	variable d: Immutable [[[Integer]]];
}

// ==================================================
//
//	Block
//
// ==================================================

// Empty block
function foo {}

// Single statement/variable declaration
function foo {
	variable a: Integer;
}

// Mixed between variable declarations and statements
function foo {
	variable a: Integer;
	a = 1;
	variable b: Integer;
	b = a;
}

// Variable declarations first and statements second
function foo {
	variable a: Integer;
	variable b: Integer;
	a = 1;
	b = a;
}

// Variable declarations second and statements first
function foo {
	if not true {
		return;
	}
	variable a: Integer;
}

// ==================================================
//
//	Statement
//
// ==================================================

function foo {
	// Define variable statement
	b := 2;

	// Declared variable assignment
	a = 1;

	// Compound assignment operators
	a += 1;
	a -= 1;
	a *= 1;
	a /= 1;

	foo();

	// Wait-for-in
	wait for true in queue;

	// Signal
	signal queue;

	// Broadcast
	broadcast queue;

	// Return without an expression
	return;

	// Return with an expression
	return true;

	// If
	if true {}

	// If-ElseIf
	if true {} else if false {}

	// If-Else
	if true {} else {}

	// If-ElseIf-Else
	if true {} else if false {} else {}

	// While 
	while true {}

	// For
	// TODO

	// Spawn
	spawn {
		print("spawn");
	}

	// Block
	{
		block := "block";
		print(block);
	}
}

// ==================================================
//
//	Variable
//
// ==================================================

function foo {
	// Lower ID Variable
	a = 1;

	// Indexed variable
	a[0] = 2;
}

// ==================================================
//
//	Expression
//
// ==================================================

function foo {
	// Or
	a := true or false;

	// And
	a := true and false;

	// ==
	a := true == false;

	// !=
	a := true != false;
	
	// <=
	a := 1 <= 2;

	// >=
	a := 1 >= 2;

	// <
	a := 1 < 2;

	// >
	a := 1 > 2;

	// +
	a := 1 + 2;

	// -
	a := 1 - 2;

	// *
	a := 1 * 2;

	// /
	a := 1 / 2;

	// - (unary)
	a := -1;

	// not
	a := not true;

	/*
	 * Primary expression
	 */

	// Literal
	a := true;

	// Variable
	a := b;

	// Function call
	a := foo();
	
	// Parenthesized
	a := (1 - 1);

	/*
	 * Mixed expressions
	 */
	a := true or false or 1 > 2;
	a := not 1 <= 3 and false and 1 < 2 or 1 >= 2;
	a := (1 + 3) - 2 / -5;
	a := --5;
	a := not not false;
}

/*
 * Literal
 */

function foo {
	// True
	a := true;

	// False
	a := false;

	// Integer
	a := 1;
	
	// Float
	a := 1.5;

	// String
	a := "string";

	// Array
	a := [1];
	a := [1, 2];
	a := [1, 2, 3];
}

// ==================================================
//
//	Function call
//
// ==================================================

function foo {
	// No parameters
	foo();

	// Single parameter
	foo(1);

	// Many parameters
	foo(1, 2, 3);
	
	// Constructor call
	Type();

	// Method call
	a.foo();
}

// ==================================================
//
//	Monitor
//
// ==================================================

// Empty
monitor Monitor {}

// Single property/method
monitor Monitor {
	variable a: Integer;
}

// Mixed between properties, methods and constructors
monitor Monitor {
	value x = 1;
	value y: Integer = 1;

	variable b: Integer;

	function foo {

	}

	initializer {

	}

	variable c: Integer;

	function bar {

	}
}

// Method definition
monitor Monitor {
	function foo {

	}
	
	private function bar {

	}
}

// Constructor definition
monitor Monitor {
	initializer(a: Int) {
		print(a);
	}
}
