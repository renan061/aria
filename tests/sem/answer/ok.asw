{
	value topValue1: Boolean = (true: Boolean)
	value topValue2: String = ("string": String)
	value topValue3: Integer = ((3.000000: Float) as: Integer)
	value topValue4: Float = ((4: Integer) as: Float)
	function topFunction1: Void {
	}
	function topFunction2: Boolean {
	}
	function topFunction3(variable a: Boolean): Void {
	}
	function topFunction4(variable a: Integer): Float {
	}
	function topFunction5(variable a: String, variable b: Boolean, variable c: Integer): Void {
	}
	function topFunction6(variable topA: Float, variable topB: String, variable topC: Boolean): Integer {
	}
	function topFunction7(variable a: Float, variable b: Float, variable c: Float): Void {
	}
	function topFunction8(variable a: String, variable b: Boolean, variable c: Boolean, variable d: Boolean): Integer {
	}
	function topFunction9(variable a: Float, variable b: String, variable c: String, variable d: Boolean): Void {
	}
	function topFunction10: [[[String]]] {
	}
	monitor SpawnMonitor {
		function SpawnMonitor: SpawnMonitor {
		}
	}
	function foo: Void {
		variable indexed: [[[Integer]]]
		value x: [[Integer]] = (((indexed: [[[Integer]]])[(0: Integer)]: [[Integer]]))
		value y: [Integer] = (((((indexed: [[[Integer]]])[(0: Integer)]: [[Integer]]))[(0: Integer)]: [Integer]))
		value z: String = (((((((topFunction10(): [[[String]]])[(0: Integer)]: [[String]]))[(0: Integer)]: [String]))[(0: Integer)]: String))
		variable variable1: Boolean
		variable variable2: Integer
		variable variable3: Integer
		variable variable4: Float
		variable variable5: Float
		variable variable6: Float
		value syntacticSugarDefinition1: Boolean = (false: Boolean)
		value syntacticSugarDefinition2: Void = (foo(): Void)
		value value1: Integer = (1: Integer)
		value value2: Integer = (1: Integer)
		value value3: Float = ((1: Integer) as: Float)
		value value4: Integer = (1: Integer)
		variable variable7: Float = (1.000000: Float)
		variable variable8: Float = (1.000000: Float)
		variable variable9: Float = ((1: Integer) as: Float)
		variable variable10: Integer = (1: Integer)
		variable variable11: Void = (foo(): Void)
		variable variable12: String = (topValue2: String)
		variable1: Boolean = ((value3: Float) >: Boolean ((2: Integer) as: Float))
		variable11: Void = (foo(): Void)
		foo(): Void
		topFunction3((((42: Integer) as: Float) ==: Boolean (1.000000: Float))): Void
		topFunction6(((1: Integer) as: Float), (variable12: String), ((syntacticSugarDefinition1: Boolean) or: Boolean (topFunction2(): Boolean))): Integer
		topFunction7(((1: Integer) as: Float), ((2: Integer) as: Float), ((3: Integer) as: Float)): Void
		topFunction7((1.000000: Float), (2.000000: Float), (topFunction4(((3.000000: Float) as: Integer)): Float)): Void
		return
		if (true: Boolean) {
		}
		if (false: Boolean) {
		} else {
		}
		while ((1: Integer) >: Boolean (2: Integer)) {
		}
		value spawnMonitor: SpawnMonitor = (SpawnMonitor(): SpawnMonitor)
		value nestedSafeType: Immutable [Immutable [Immutable [Integer]]] = (Immutable [Immutable [Immutable [Integer]]]((10: Integer)): Immutable [Immutable [Immutable [Integer]]])
		spawn {
			variable a: SpawnMonitor = (spawnMonitor: SpawnMonitor)
			value b: Integer = (value1: Integer)
			value c: Immutable [Immutable [Immutable [Integer]]] = (nestedSafeType: Immutable [Immutable [Immutable [Integer]]])
			variable x: Integer = (1: Integer)
			variable y: Integer = (2: Integer)
			x: Integer = (((y: Integer) *: Integer (2: Integer)) +: Integer (value1: Integer))
		}
		{
			value a: Integer = (1: Integer)
			value b: Integer = (2: Integer)
			variable c: Float
			if ((a: Integer) >: Boolean (b: Integer)) {
				c: Float = ((a: Integer) as: Float)
			} else {
				c: Float = ((b: Integer) as: Float)
			}
		}
	}
	monitor Monitor1 {
		value queue: String = ("FIXME": String)
		function Monitor1: Monitor1 {
			return
		}
		function foo: String {
			return ("string": String)
		}
		function bar: Void {
			while (true: Boolean) wait in queue: String
			signal queue: String
			broadcast queue: String
		}
	}
	monitor Monitor2 {
		function Monitor2(variable n1: Integer, variable n2: Integer): Monitor2 {
		}
		function foo(variable n1: Integer, variable n2: Integer): Void {
		}
	}
	monitor Monitor3 {
		function Monitor3(variable boolean: Boolean, variable float: Float, variable string: String): Monitor3 {
		}
		function foo(variable boolean: Boolean, variable float: Float, variable string: String): Void {
		}
	}
	function newMonitor3: Monitor3 {
	}
	function bar: Void {
		value m1: Monitor1 = (Monitor1(): Monitor1)
		value m2: Monitor2 = (Monitor2((1: Integer), (2: Integer)): Monitor2)
		value m3: Monitor3 = (Monitor3((true: Boolean), (1.000000: Float), ("aria": String)): Monitor3)
		(m1: Monitor1).foo(): String
		(m2: Monitor2).foo((1: Integer), ((2.000000: Float) as: Integer)): Void
		(Monitor2((1: Integer), (2: Integer)): Monitor2).foo(((1.000000: Float) as: Integer), (0: Integer)): Void
		(m3: Monitor3).foo((false: Boolean), ((1: Integer) as: Float), ("aria-lang": String)): Void
		(newMonitor3(): Monitor3).foo((true: Boolean), (1.000000: Float), ("aria language": String)): Void
	}
	function expressions: Void {
		variable a: Boolean = (true: Boolean)
		a: Boolean = (false: Boolean)
		variable b: Float = (0.000000: Float)
		b: Float = ((1000: Integer) as: Float)
		value c: Float = (0.000000: Float)
		value string1: String = ("c": String)
		value string2: String = ("string": String)
		value string3: String = ("s p a c e d s t r i n g": String)
		value var: String = (string1: String)
		value functionCall: Monitor3 = (newMonitor3(): Monitor3)
		a: Boolean = (not(true: Boolean): Boolean)
		b: Float = ((-(1: Integer): Integer) as: Float)
		a: Boolean = ((true: Boolean) or: Boolean (false: Boolean))
		a: Boolean = ((true: Boolean) and: Boolean (false: Boolean))
		a: Boolean = ((1: Integer) ==: Boolean (1: Integer))
		a: Boolean = ((1: Integer) <=: Boolean (1: Integer))
		a: Boolean = ((1: Integer) >=: Boolean (1: Integer))
		a: Boolean = ((1: Integer) <: Boolean (1: Integer))
		a: Boolean = ((1: Integer) >: Boolean (1: Integer))
		b: Float = (((1: Integer) +: Integer (1: Integer)) as: Float)
		b: Float = ((1.000000: Float) -: Float ((1: Integer) as: Float))
		b: Float = (((1: Integer) as: Float) *: Float (1.000000: Float))
		b: Float = ((1.000000: Float) /: Float (1.000000: Float))
	}
	function scoping: Void {
	}
	monitor Scoping1 {
		value a: [Integer] = ([Integer]((10: Integer)): [Integer])
		private function scoping(variable a: Float): Float {
			return ((a: Float) *: Float ((2: Integer) as: Float))
		}
		function bar: Void {
			value b: Integer = (((a: [Integer])[(0: Integer)]: Integer))
			{
				value b: Float = (scoping((1.000000: Float)): Float)
			}
		}
	}
	monitor Scoping2 {
		function foo: Void {
			value a: Void = (scoping(): Void)
		}
	}
}
