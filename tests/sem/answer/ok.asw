value topValue1: Boolean = (true: Boolean)
value topValue2: String = ("string": String)
value topValue3: Integer = ((3.000000: Float) as: Integer)
value topValue4: Float = ((4: Integer) as: Float)
function topFunction1: Void {
}
function topFunction2: Boolean {
}
function topFunction3(value a: Boolean): Void {
}
function topFunction4(value a: Integer): Float {
}
function topFunction5(value a: String, value b: Boolean, value c: Integer): Void {
}
function topFunction6(value topA: Float, value topB: String, value topC: Boolean): Integer {
}
function topFunction7(value a: Float, value b: Float, value c: Float): Void {
}
function topFunction8(value a: String, value b: Boolean, value c: Boolean, value d: Boolean): Integer {
}
function topFunction9(value a: Float, value b: String, value c: String, value d: Boolean): Void {
}
function topFunction10: [[[String]]] {
}
monitor SpawnMonitor {
	function SpawnMonitor: SpawnMonitor {
	}
}
function foo: Void {
	variable indexed: [[[Integer]]]
	value x: [[Integer]] = (((indexed: [[[Integer]]])[(0: Integer)]: [[Integer]]))
	value y: [Integer] = (((((indexed: [[[Integer]]])[(0: Integer)]: [[Integer]]))[(0: Integer)]: [Integer]))
	value z: String = (((((((topFunction10(): [[[String]]])[(0: Integer)]: [[String]]))[(0: Integer)]: [String]))[(0: Integer)]: String))
	variable variable1: Boolean
	variable variable2: Integer
	variable variable3: Integer
	variable variable4: Float
	variable variable5: Float
	variable variable6: Float
	variable5: Float = (5.000000: Float)
	variable6: Float = (6.000000: Float)
	value syntacticSugarDefinition1: Boolean = (false: Boolean)
	value syntacticSugarDefinition2: Void = (foo(): Void)
	value value1: Integer = (1: Integer)
	value value2: Integer = (1: Integer)
	value value3: Float = ((1: Integer) as: Float)
	value value4: Integer = (1: Integer)
	variable variable7: Float = (1.000000: Float)
	variable variable8: Float = (1.000000: Float)
	variable variable9: Float = ((1: Integer) as: Float)
	variable variable10: Integer = (1: Integer)
	variable variable11: Void = (foo(): Void)
	variable variable12: String = (topValue2: String)
	variable1: Boolean = ((value3: Float) >: Boolean ((2: Integer) as: Float))
	variable11: Void = (foo(): Void)
	foo(): Void
	topFunction3((((42: Integer) as: Float) ==: Boolean (1.000000: Float))): Void
	topFunction6(((1: Integer) as: Float), (variable12: String), ((syntacticSugarDefinition1: Boolean) or: Boolean (topFunction2(): Boolean))): Integer
	topFunction7(((1: Integer) as: Float), ((2: Integer) as: Float), ((3: Integer) as: Float)): Void
	topFunction7((1.000000: Float), (2.000000: Float), (topFunction4(((3.000000: Float) as: Integer)): Float)): Void
	return
	if (true: Boolean) {
	}
	if (false: Boolean) {
	} else {
	}
	while ((1: Integer) >: Boolean (2: Integer)) {
	}
	value spawnMonitor: SpawnMonitor = (SpawnMonitor(): SpawnMonitor)
	value nestedSafeType: Immutable [Immutable [Immutable [Integer]]] = (Immutable [Immutable [Immutable [Integer]]]((8: Integer)): Immutable [Immutable [Immutable [Integer]]])
	spawn function(value nestedSafeType: Immutable [Immutable [Immutable [Integer]]], value value1: Integer, value spawnMonitor: SpawnMonitor) {
		variable a: SpawnMonitor = (spawnMonitor: SpawnMonitor)
		value b: Integer = (value1: Integer)
		value c: Immutable [Immutable [Immutable [Integer]]] = (nestedSafeType: Immutable [Immutable [Immutable [Integer]]])
		variable x: Integer = (1: Integer)
		variable y: Integer = (2: Integer)
		x: Integer = (((y: Integer) *: Integer (2: Integer)) +: Integer (value1: Integer))
		while ((x: Integer) <: Boolean (10: Integer)) {
			x: Integer = ((x: Integer) +: Integer (1: Integer))
		}
	}((nestedSafeType: Immutable [Immutable [Immutable [Integer]]]), (value1: Integer), (spawnMonitor: SpawnMonitor))
	{
		value a: Integer = (1: Integer)
		value b: Integer = (2: Integer)
		variable c: Float
		if ((a: Integer) >: Boolean (b: Integer)) {
			c: Float = ((a: Integer) as: Float)
		} else {
			c: Float = ((b: Integer) as: Float)
		}
	}
}
monitor Monitor1 {
	variable queue: ConditionQueue
	function Monitor1: Monitor1 {
		return
	}
	function foo(value self: Monitor1): String {
		return ("string": String)
	}
	function bar(value self: Monitor1): Void {
		wait for (true: Boolean) in (queue: ConditionQueue)
		signal (queue: ConditionQueue)
		broadcast (queue: ConditionQueue)
	}
}
monitor Monitor2 {
	function Monitor2(value n1: Integer, value n2: Integer): Monitor2 {
	}
	function foo(value self: Monitor2, value n1: Integer, value n2: Integer): Void {
	}
}
monitor Monitor3 {
	function Monitor3(value boolean: Boolean, value float: Float, value string: String): Monitor3 {
	}
	function foo(value self: Monitor3, value boolean: Boolean, value float: Float, value string: String): Void {
	}
}
function newMonitor3: Monitor3 {
}
function bar: Void {
	value m1: Monitor1 = (Monitor1(): Monitor1)
	value m2: Monitor2 = (Monitor2((1: Integer), (2: Integer)): Monitor2)
	value m3: Monitor3 = (Monitor3((true: Boolean), (1.000000: Float), ("aria": String)): Monitor3)
	(m1: Monitor1).foo((m1: Monitor1)): String
	(m2: Monitor2).foo((m2: Monitor2), (1: Integer), ((2.000000: Float) as: Integer)): Void
	(Monitor2((1: Integer), (2: Integer)): Monitor2).foo((Monitor2((1: Integer), (2: Integer)): Monitor2), ((1.000000: Float) as: Integer), (0: Integer)): Void
	(m3: Monitor3).foo((m3: Monitor3), (false: Boolean), ((1: Integer) as: Float), ("aria-lang": String)): Void
	(newMonitor3(): Monitor3).foo((newMonitor3(): Monitor3), (true: Boolean), (1.000000: Float), ("aria language": String)): Void
}
function expressions: Void {
	variable a: Boolean = (true: Boolean)
	a: Boolean = (false: Boolean)
	variable b: Float = (0.000000: Float)
	b: Float = ((1000: Integer) as: Float)
	value c: Float = (0.000000: Float)
	value string1: String = ("c": String)
	value string2: String = ("string": String)
	value string3: String = ("s p a c e d s t r i n g": String)
	value array1: [Integer] = ([(1: Integer)]: [Integer])
	value array2: [Boolean] = ([(true: Boolean), (false: Boolean)]: [Boolean])
	value array3: [Float] = ([((1: Integer) as: Float), (2.000000: Float), ((3: Integer) as: Float)]: [Float])
	value array4: [Float] = ([(1.000000: Float), ((2: Integer) as: Float), ((3: Integer) as: Float)]: [Float])
	value array5: [Float] = ([((1: Integer) as: Float), ((2: Integer) as: Float), (3.000000: Float)]: [Float])
	value var: String = (string1: String)
	value functionCall: Monitor3 = (newMonitor3(): Monitor3)
	a: Boolean = (not(true: Boolean): Boolean)
	b: Float = ((-(1: Integer): Integer) as: Float)
	a: Boolean = ((true: Boolean) or: Boolean (false: Boolean))
	a: Boolean = ((true: Boolean) and: Boolean (false: Boolean))
	a: Boolean = ((1: Integer) ==: Boolean (1: Integer))
	a: Boolean = ((1: Integer) !=: Boolean (1: Integer))
	a: Boolean = ((1: Integer) <=: Boolean (1: Integer))
	a: Boolean = ((1: Integer) >=: Boolean (1: Integer))
	a: Boolean = ((1: Integer) <: Boolean (1: Integer))
	a: Boolean = ((1: Integer) >: Boolean (1: Integer))
	b: Float = (((1: Integer) +: Integer (1: Integer)) as: Float)
	b: Float = ((1.000000: Float) -: Float ((1: Integer) as: Float))
	b: Float = (((1: Integer) as: Float) *: Float (1.000000: Float))
	b: Float = ((1.000000: Float) /: Float (1.000000: Float))
}
function scoping: Void {
}
monitor Scoping1 {
	value a: [Integer] = ([Integer]((8: Integer)): [Integer])
	private function scoping(value self: Scoping1, value a: Float): Float {
		return ((a: Float) *: Float ((2: Integer) as: Float))
	}
	function bar(value self: Scoping1): Void {
		value b: Integer = (((a: [Integer])[(0: Integer)]: Integer))
		{
			value b: Float = (scoping((self: Scoping1), (1.000000: Float)): Float)
		}
	}
}
monitor Scoping2 {
	function foo(value self: Scoping2): Void {
		value a: Void = (scoping(): Void)
	}
}
