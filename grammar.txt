/*
 *	Grammar
 *
 *	Abreviações:
 *		- {something} significa sequência de zero ou mais 'something'
 *		- [something] siignifica que 'something' é opcional
 */

program
	: {definition}

definition
	: function-definition
	| monitor-definition

function-definition
	: 'function' ID parameters [type] block

parameters
	: '(' [parameter {',' parameter}] ')'

parameter
	: variable-declaration

variable-declaration
	: ID {',' ID} type

type
	: ID
	| array-type
	| base-type

array-type
	: '[' type ']'

base-type
	: 'Bool'
	| 'Rune'
	| 'Int'
	| 'Float'
	| 'String'

block
	: '{' {block-content} '}'

block-content
	: variable-declaration
	| statement

statement
	: simple-statement
	| compound-statement

simple-statement
	: variable '=' expression
	| ID ':=' expression
	| function-call
	| 'return' [expression]

compound-statement
	: 'if' expression block
	| 'if' expression block 'else' block
	| 'while' expression block
	| 'spawn' block
	| block

expression
	: expression-or

expression-or
	: expression-or 'or' expression-and
	| expression-and

expression-and
	: expression-and 'and' expression-comparison
	| expression-comparison

expression-comparison
	: expression-comparison '==' expression-addition
	| expression-comparison '<=' expression-addition
	| expression-comparison '>=' expression-addition
	| expression-comparison '<' expression-addition
	| expression-comparison '>' expression-addition
	| expression-addition

expression-addition
	: expression-addition '+' expression-multiplication
	| expression-addition '-' expression-multiplication
	| expression-multiplication

expression-multiplication
	: expression-multiplication '*' expression-unary
	| expression-multiplication '/' expression-unary
	| expression-unary

expression-unary
	: '-' expression-primary
	| 'not' expression-primary
	| 'not' 'not' expression-primary
	| expression-primary

expression-primary
	: literal
	| variable
	| function-call
	| array-type '(' expression ')' 	// new array (?)
	| ID arguments						// constructor call
	| '(' expression ')'

literal
	: 'true'
	| 'false'
	| RUNE?
	| INT
	| FLOAT
	| STRING

variable
	: ID
	| expression-primary '[' expression ']'

function-call
	: ID arguments
	| expression-primary '.' ID arguments

arguments
	: '(' [expression {',' expression}] ')'

monitor-definition
	: 'monitor' ID monitor-body

monitor-body
	: '{' {monitor-body-content} '}'

monitor-body-content
	: attribute-declaration
	| constructor-definition
	| method-definition

attribute-declaration
	: 'private' variable-declaration

constructor-definition
	: 'init' parameters block

method-definition
	: ['private'] 'function' ID parameters [type] monitor-block

monitor-block
	: '{' {monitor-block-content} '}'

monitor-block-content
	: variable-declaration
	| monitor-statement

monitor-statement
	: monitor-simple-statement
	| monitor-compound-statement

monitor-simple-statement
	: 'wait' 'in' variable? 'until' function-call?
	| 'signal' variable?
	| 'broadcast' variable?
	| simple-statement

monitor-compound-statement
	: 'if' expression monitor-block
	| 'if' expression monitor-block 'else' monitor-block
	| 'while' expression monitor-block
	| 'spawn' block // ASK: Deveria poder criar novas threads?
	| monitor-block
