
// configuration
value size    = 10000;
value threads = 4;
value runs    = 10;
value subruns = 10;

value section = size / threads;
value single  = 0;
value multi   = 1;

monitor Barrier {
    variable queue = ConditionQueue();
    variable current, counter: Integer;

    initializer(n: Integer) {
        current = 0;
        counter = n;
    }

    function synchronize {
        current = current + 1;
        wait for current == counter in queue;
        broadcast queue;
    }
}

monitor Array {
    variable n: Integer;
    variable array: [Float];

    initializer(size: Integer) {
        n = size;
        array = [Float](n);
    }

    function get(i: Integer): Float    { return array[i]; }
    function set(i: Integer, v: Float) { array[i] = v;    }
}

function main {
    srand(93029);

    value partials = [[Float](runs) | i in 0...2];
    variable t: Float;

    // memory
    t = getTime();
    value a = Immutable [(rand() / 1000000) as Float | i in 0...size * size];
    value b = Immutable [(rand() / 1000000) as Float | i in 0...size       ];
    // value a = Immutable [
    //     [(rand() / 1000000) as Float | j in 0...size]
    // | i in 0...size];
    value c = [Float](size);
    value m = Array(size);
    value memory = getTime() - t;

    // single
    for variable i = 0; i < runs; i = i + 1 {
        t = getTime();
        variable r: Float;
        variable ioff: Integer;
        for variable x = 0; x < subruns; x = x + 1 {
            for variable i = 0; i < size; i = i + 1 {
                r = 0;
                ioff = i * size;
                for variable j = 0; j < size; j = j + 1 {
                    r = r + a[i][j] * b[j];
                }
                c[i] = r;
            }
        }
        partials[single][i] = getTime() - t;
    }

    // multi
    for variable i = 0; i < runs; i = i + 1 {
        t = getTime();
        for variable x = 0; x < subruns; x = x + 1 {
            value barrier = Barrier(threads + 1);
            for variable i = 0; i < threads; i = i + 1 {
                value thread = i;
                spawn {
                    value start = thread * section;
                    value end = start + section;
                    variable r: Float;
                    variable ioff: Integer;
                    for variable i = start; i < end; i = i + 1 {
                        r = 0;
                        ioff = i * size;
                        for variable j = 0; j < size; j = j + 1 {
                            r = r + a[i][j] * b[j];
                        }
                        m.set(i, r);
                    }
                    barrier.synchronize();
                }
            }
            barrier.synchronize();
        }
        partials[multi][i] = getTime() - t;
    }

    // validating
    for variable i = 0; i < size; i = i + 1 {
        if c[i] != m.get(i) {
            print("\n\t!!! ERROR (c != m) !!!\n");
            return;
        }
    }

    // stats
    value avg = [0.0, 0.0];
    value min = [10000000000.0, 10000000000.0];
    value max = [0.0, 0.0];
    variable x, diffmax, diffmin: Float;

    print("\n");
    print("\tMemory: %f sec\n", memory);
    print("\n");
    print("\tSize: %d\n", size);
    print("\tRuns: %d\n", runs);
    print("\tSubruns: %d\n", subruns);
    print("\n");

    for variable i = 0; i < 2; i = i + 1 {
        for variable j = 0; j < runs; j = j + 1 {
            x = partials[i][j];
            avg[i] = avg[i] + x;
            if x < min[i] { min[i] = x; }
            if x > max[i] { max[i] = x; }
        }
        avg[i] = avg[i] / runs;
        diffmax = max[i] - avg[i];
        diffmin = avg[i] - min[i];

        print("\t");
        if i == single {
            print("SINGLE");
        } else {
            print("MULTI (%d threads)", threads);
        }
        print("\n");
        print("\tAvg: %f sec\n", avg[i]);
        print("\tMax: %f sec (+%f)\n", max[i], diffmax);
        print("\tMin: %f sec (-%f)\n", min[i], diffmin);
        print("\t- %f%%\n", diffmin / avg[i] * 100);
        print("\t+ %f%%\n", diffmax / avg[i] * 100);
        print("\n");
    }

    value speedup = avg[single] / avg[multi];
    print("\tSpeedup: %.2f\n", speedup);
    print("\tThread Efficiency: %.2f%%\n", speedup / threads * 100);
    print("\n");

    if size == 0 {
        print("%p\n", c);
    }
}
