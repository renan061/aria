
// configuration
value size    = 100000000;
value runs    = 10;
value subruns = 10;

value result = 887459712;

// misc.
value minFloat = 0.0;
value maxFloat = 10000000000.0;

// monitors

monitor Array {
    variable array: [Integer];

    initializer(size: Integer) {
        array = [i for i in [0 -> size]];
    }

    function get(i: Integer): Integer {
        return array[i];
    }

    function set(i: Integer, n: Integer) {
        array[i] = n;
    }

    function sum: Integer {
        variable x = 0;
        for i in [0 -> size] {
            x = x + array[i];
        }
        return x;
    }
}

// functions

// regular
function sumR(array: Immutable [Integer]): Integer {
    variable x = 0;
    for i in [0 -> size] {
        x = x + array[i];
    }
    // print("%d\n", x);
    return x;
}

// monitor get
function sumMG(array: Array): Integer {
    variable x = 0;
    for i in [0 -> size] {
        x = x + array.get(i);
    }
    return x;
}

// unlocked monitor
function sumUM(array: Array): Integer {
    variable x = 0;
    acquire value m = array.unlocked() {
        for i in [0 -> size] {
            x = x + m.get(i);
        }
    }
    return x;
}

function stats(base: Float, partials: [Float]): Float {
    variable x: Float;
    variable avg = 0.0;
    variable min = maxFloat;
    variable max = minFloat;
    for i in [0 -> runs] {
        x = partials[i];
        avg = avg + x;
        if x < min { min = x; }
        if x > max { max = x; }
    }
    avg = avg / runs;

    value p = 100 / avg;
    value diffMax = (max - avg) * p;
    value diffMin = (avg - min) * p;

    print("\n");
    print("\tAvg: %f sec\n", avg);
    print("\tMax: %f sec (+ %.1f%%)\n", max, diffMax);
    print("\tMin: %f sec (- %.1f%%)\n", min, diffMin);
    if base != 0 {
        print("\t=> %.2f slower\n", avg / base);
    }
    print("\n");

    return avg;
}

// main

function main {
    variable partials = [Float](runs);
    variable t, base: Float;

    print("\n");

    { // regular array
        value array = Immutable [i for i in [0 -> size]];
        for i in [0 -> runs] {
            t = getTime();
            for j in [0 -> subruns] {
                assert(sumR(array) == result, "sumR error\n");
            }
            partials[i] = getTime() - t;
        }
        print("\tREGULAR ARRAY\n");
        base = stats(0, partials);
    }

    { // monitor array
        value array = Array(size);
        for i in [0 -> runs] {
            t = getTime();
            for j in [0 -> subruns] {
                assert(sumMG(array) == result, "sumMG error\n");
            }
            partials[i] = getTime() - t;
        }
        print("\tARRAY MONITOR USING GET\n");
        stats(base, partials);
    }

    { // monitor array method
        value array = Array(size);
        for i in [0 -> runs] {
            t = getTime();
            for j in [0 -> subruns] {
                assert(array.sum() == result, "array.sum error\n");
            }
            partials[i] = getTime() - t;
        }
        print("\tMONITOR METHOD\n");
        stats(base, partials);
    }

    { // unlocked monitor
        value array = Array(size);
        for i in [0 -> runs] {
            t = getTime();
            for j in [0 -> subruns] {
                assert(sumUM(array) == result, "sumMG error\n");
            }
            partials[i] = getTime() - t;
        }
        print("\tUNLOCKED MONITOR\n");
        stats(base, partials);
    }
}
