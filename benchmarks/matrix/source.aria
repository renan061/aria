
monitor Matrix {
    variable n: Integer;
    variable matrix: [[Float]];
    initializer(n : Integer) {
        matrix = [[Float]](n);
        for variable i = 0; i < n; i = i + 1 {
            matrix[i] = [Float](n);
        }
    }

    function set(i, j: Integer, v: Float) {
        matrix[i][j] = v;
    }
}

monitor MatrixArray {
    variable size: Integer;
    variable matrixes: [Matrix];

    initializer(n: Integer) {
        size = n;
        matrixes = [Matrix](n);
    }

    function createMatrixes(n: Integer) {
        for variable i = 0; i < size; i = i + 1 {
            matrixes[i] = Matrix(n);
        }
    }

    function get(i: Integer): Matrix {
        return matrixes[i];
    }
}

function main {
    // constants
    value split = 4; // divide A and B in (split) smaller matrixes
    value n1 = 6;    // size of the A and B matrixes (NxN)

    value n2 = n1 / (split/2); // size of the smaller matrixes

    value array = MatrixArray(split);
    array.createMatrixes(n2);

    for variable i = 0; i < split/2; i = i + 1 {
        for variable j = 0; j < split/2; j = j + 1 {
            value i0 = i * n2;
            value j0 = j * n2;
            value i1 = i * (n2 + 1);
            value j1 = j * (n2 + 1);
            value index = i * 2 + j;

            spawn {
                value matrix = array.get(index);
                acquire value m = matrix.unlocked() {
                    variable aux: Float;
                    for variable i = i0; i < i1; i = i + 1 {
                        for variable j = j0; j < j1; j = j + 1 {
                            aux = 0;
                            for variable k = 0; k < n2; k = k + 1 {
                                aux = aux + a[i][k] * b[k][j];
                            }
                            m.set(i - i0, j - j0, aux);
                        }
                    }
                }
            }
        }
    }
}
