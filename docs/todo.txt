
- Test operator precedence and expressions inside parenthesis precedence in
	the parser (only after test script is refactored)

// ==================================================
//
//	Global
//
// ==================================================

// global
// permitir expressões que não sejam literais?
value g = true or false;

// ==================================================
//
//	Ask
//
// ==================================================

- foo() = 1 é erro do parser, mas foo()[1] = 1 é erro semântico, inconsistência?

- This
	var x []int

	func foo() []int {
		x = []int{10, 20, 30}
		return x
	}

	func main() {
		foo()
		println(x) // [10 20 30]
		foo()[1] = 77
		println(x) // [10 77 30]
	}

// ==================================================
//
//	Thinking
//
// ==================================================

closure : [arguments [type] 'in'] block

return { lenght(values) > 0 }

return (values) Bool in { lenght(values) > 0 }
